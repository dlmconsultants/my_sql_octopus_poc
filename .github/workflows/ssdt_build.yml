name: SSDT - Build and package AdventureWorks DacPac and push to Octopus Deploy

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: '*'
    paths:
    - 'Databases/AdventureWorks/**'
    - '.github/workflows/ssdt_build.yml'
  pull_request:
    branches: '*'
    paths:
    - 'Databases/AdventureWorks/**'
    - '.github/workflows/ssdt_build.yml'
  workflow_dispatch:     # Enables manual runs
  schedule:
    - cron:  '0 1 * * *' # runs at 1am every morning
                         # (useful for ensuring outside factors don't break the build)

env:  
  OUTPUT_FOLDER: PackagesOutput
  PACKAGE_NAME: AdventureWorks
  OCTOPUS_SPACE_NAME: Default
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true # Note: This is a bad idea and should be fixed.
                                        # For more information, see:
                                        # https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Validate GitHub secrets
      env:
        OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
        OCTOPUS_APIKEY: ${{ secrets.OCTOPUS_APIKEY }}        
      run: |        
        .\.github\workflows\helper_scripts\validate_github_secrets.ps1 -OctoUrl "${env:OCTOPUS_URL}" -OctoApiKey "${env:OCTOPUS_APIKEY}"
      shell: powershell 

    - name: Set the version number      
      run: |        
        # The first two numbers come from versionprefix.txt
        $versionFromFile = Get-Content versionprefix.txt 
        Write-Host "Found $versionFromFile in versionprefix.md"
        
        # The last number is the GitHub run number
        $versionNumber = "$versionfromFile.${env:GITHUB_RUN_NUMBER}"
        
        # If this branch isn't main, append the branch name as a prerelease suffix
        # More info: https://docs.microsoft.com/en-us/nuget/create-packages/prerelease-packages
        $branchName = "${{github.ref}}".Split("/")["${{github.ref}}".Split("/").Length -1]
        if ($branchName -notlike "main"){
          $versionNumber = "$versionNumber-$branchName"
        }
        
        Write-Host "Setting version number to: $versionNumber"
        echo "::set-env name=PACKAGE_VERSION::$versionNumber"    
      shell: powershell

    # Adds MSBuild to PATH on the agent
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    # Uses MSBuild to compile the database project and pack the NuGet
    - name: Build the dacpac
      run: .\Databases\AdventureWorks\build\build.ps1

    - name: Setup NuGet.exe for use with actions
      uses: NuGet/setup-nuget@v1.0.5

    - name: Pack the NuGet
      run: |
        nuget pack ".\Databases\AdventureWorks\AdventureWorks\AdventureWorks\bin\Debug\${env:PACKAGE_NAME}.nuspec" -Version "${env:PACKAGE_VERSION}" -OutputDirectory "${env:OUTPUT_FOLDER}" 
      shell: powershell  

    - name: Install Octopus Tooling
      run: choco install octopustools -y
      shell: powershell

    - name: Handoff to Octopus Deploy
      env:
        OCTOPUS_URL: ${{ secrets.OCTOPUS_URL }}
        OCTOPUS_APIKEY: ${{ secrets.OCTOPUS_APIKEY }}        
      run: |        
        octo push --package="${env:OUTPUT_FOLDER}\${env:PACKAGE_NAME}.${env:PACKAGE_VERSION}.nupkg" --server="${env:OCTOPUS_URL}" --apiKey="${env:OCTOPUS_APIKEY}" --space="${env:OCTOPUS_SPACE_NAME}"
      shell: powershell   
  
